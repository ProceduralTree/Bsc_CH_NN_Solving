#+title: Maxima Test

* Laplace Substitution
#+begin_src maxima  :results drawer :exports both :tangle maxima.mac
load("mactex-utilities");
load("vect");
declare(d , constant);
Dx(x):=
if atom(x) then x
    elseif operatorp(x , "-") then -Dx(-x)
    elseif operatorp(x , ["+", "*"]) then map(Dx , x)
    else subvar(op(x),args(x)[1] + 1/2 , args(x)[2]) - subvar(op(x),args(x)[1]-1/2 , args(x)[2]);
declare( Dx , additive );
declare( Dx , oddfun );

Dy(x):=
    if atom(x) then x
    elseif operatorp(x , "-") then -Dy(-x)
    elseif operatorp(x , ["+", "*"]) then map(Dy , x)
    else subvar(op(x),args(x)[1],   args(x)[2]+ 1/2) - subvar(op(x),args(x)[1],  args(x)[2]- 1/2);
declare( Dy , additive );
declare( Dy , oddfun );

\Delta_d(x) := ratsimp( Dx(Dx(x)) + Dy(Dy(x)));
prefix("\Delta_d");

a : \Delta_d W[i,j];
W[i,j] := W(u[i,j]);
prefix("G");
declare("G" , linear);

L : matrix([\phi[i,j] / dt - G  \Delta_d \mu[i,j] , \epsilon^2 * G \Delta_d \phi[i,j] - 2 *\phi[i,j] + \mu[i,j]]);
L : transpose(L);
tex(L);
#+end_src

#+RESULTS:
:results:
$$\begin{pmatrix}-G\left(\mu_{i+1,j}\right)-G\left(\mu_{i,j+1}\right)
 +4\,G\left(\mu_{i,j}\right)-G\left(\mu_{i,j-1}\right)+\frac{\varphi
 _{i,j}}{{\it dt}}-G\left(\mu_{i-1,j}\right) \\ \varepsilon^2\,\left(
 G\left(\varphi_{i+1,j}\right)+G\left(\varphi_{i,j+1}\right)-4\,G
 \left(\varphi_{i,j}\right)+G\left(\varphi_{i,j-1}\right)+G\left(
 \varphi_{i-1,j}\right)\right)-2\,\varphi_{i,j}+\mu_{i,j} \\
 \end{pmatrix}$$
:end:

* Smoothing operator matrix form:
#+begin_src maxima  :results output drawer :outputs
load("mactex-utilities");
load(pytranslate);

eq_1 : unk_\phi  / dt + bordernumber/h^2 * unk_\mu = \zeta + (G[i+1/2,j] * \mu[i+1,j] + G[i-1/2,j] * smooth_\mu[i-1,j])/h^2 + (G[i,j+1/2] * \mu[i,j+1/2] + G[i,j-1/2] * smooth_\mu[i,j-1])/h^2;
res_1 : solve(eq_1 , \zeta);
eq_2 : -(\epsilon^2/h^2 * (gsum) + 2) * unk_\phi + unk_\mu  = \psi - \epsilon^2/h^2 * ( G[i+1/2,j] * \phi[i+1,j] + G[i-1/2,j] * smooth_\phi[i-1,j] + G[i,j+1/2] *  \phi[i,j+1] + G[i,j-1/2] * smooth_\phi[i,j-1] );
res_2: solve(eq_2 , \psi);
cmatrix : coefmatrix([lhs(eq_1) , lhs(eq_2)] , [unk_\phi , unk_\mu]);
b : matrix([rhs(eq_1), rhs(eq_2)]);
pytranslate(b);
#+end_src

#+RESULTS:
:results:
:end:
